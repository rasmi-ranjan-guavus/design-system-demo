$default-font-size: 16px;

@function rem($value) {
  $remValue: ($value / $default-font-size) * 1rem;

  @return $remValue;
}

@function get-accent-color($color, $type: 'primary') {

  @if (lightness($color) > 50) {
      @if $type == 'primary' {
        @return rgba(#1F2D3D, 1);
      } @else if $type == 'secondary' {
        @return rgba(#000000, 0.6);
      } @else if $type == 'disabled' {
        @return rgba(#000000, 0.38);
      }
    } @else {
    @if $type == 'primary' {
      @return rgba(#FFFFFF, 1);
    } @else if $type == 'secondary' {
      @return rgba(#FFFFFF, 0.6);
    } @else if $type == 'disabled' {
      @return rgba(#FFFFFF, 0.38);
    }
  }
}

@function get-color($palette, $value: default, $for-background: null) {
  $fetched-color: map-get($palette, $value);

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    $error: 'Color for `#{$value}` not found. Make sure arguments are strings.';
      @error $error;
  }
}

@function color-multiply($foreground, $background: null) {
  @if $background == null {
    // stylelint-disable-next-line color-no-hex
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

@function create-palette($color) {
  $palette: (
     lighter: desaturate(lighten($color, 20), 10),
     light: desaturate(lighten($color, 10), 5),
     default: $color,
     dark: saturate(darken($color, 10), 5),
     darker: saturate(darken($color, 20), 10),
  );

  @return  $palette;
}

@function hexToRGB($value) {
    $red: red($value);
    $green: green($value);
    $blue: blue($value);

    @warn $red;

    @return rgb($red, $green, $blue);
}
